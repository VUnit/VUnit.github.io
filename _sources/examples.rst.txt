.. _examples:

Examples
========

VHDL
~~~~~~~~~~~~~~~~~~~~~~~

`AXI DMA <https://github.com/VUnit/vunit/tree/master/examples/vhdl/axi_dma/>`_
------------------------------------------------------------------------------

Demonstrates the AXI read and write slave verification components as
well as the AXI-lite master verification component. An AXI DMA is
verified which uses an AXI master port to read and write data from
external memory. The AXI DMA also has a control register interface
via AXI-lite.

`Communication library <https://github.com/VUnit/vunit/tree/master/examples/vhdl/com/>`_
----------------------------------------------------------------------------------------

Demonstrates the ``com`` message passing package which can be used
to communicate arbitrary objects between processes.  Further reading
can be found in the :ref:`com user guide <com_user_guide>`.

`Array <https://github.com/VUnit/vunit/tree/master/examples/vhdl/array/>`_
--------------------------------------------------------------------------

Demonstrates the ``array_t`` data type of ``array_pkg.vhd`` which
can be used to handle dynamically sized 1D, 2D and 3D data as well
as storing and loading it from csv and raw files.

`Run <https://github.com/VUnit/vunit/tree/master/examples/vhdl/run/>`_
----------------------------------------------------------------------

Demonstrates the VUnit run library.

`External Buffer <https://github.com/VUnit/vunit/tree/master/examples/vhdl/external_buffer/>`_
----------------------------------------------------------------------------------------------

`Interfacing with foreign languages (C) through VHPIDIRECT <https://ghdl.readthedocs.io/en/latest/using/Foreign.html>`_

An array of type ``uint8_t`` is allocated in a C application and some values
are written to the first ``1/3`` positions. Then, the VHDL simulation is
executed, where the (external) array/buffer is used.

In the VHDL testbenches, two vector pointers are created, each of them using
a different access mechanism (``extfunc`` or ``extacc``). One of them is used to copy
the first ``1/3`` elements to positions ``[1/3, 2/3)``, while incrementing each value
by one. The second one is used to copy elements from ``[1/3, 2/3)`` to ``[2/3, 3/3)``,
while incrementing each value by two.

When the simulation is finished, the C application checks whether data was successfully
copied/modified. The content of the buffer is printed both before and after the
simulation.

`VHDL User Guide <https://github.com/VUnit/vunit/tree/master/examples/vhdl/user_guide/>`_
-----------------------------------------------------------------------------------------

The most minimal VUnit VHDL project covering the basics of the
:ref:`User Guide <user_guide>`.

`Composite generics <https://github.com/VUnit/vunit/tree/master/examples/vhdl/composite_generics/>`_
----------------------------------------------------------------------------------------------------

See `Enable Your Simulator to Handle Complex Top-Level Generics <https://vunit.github.io/posts/2017_06_03_enable_your_simulator_to_handle_complex_top_level_generics/post.html>`_.

`Check <https://github.com/VUnit/vunit/tree/master/examples/vhdl/check/>`_
--------------------------------------------------------------------------

Demonstrates the VUnit check library.

`Logging <https://github.com/VUnit/vunit/tree/master/examples/vhdl/logging/>`_
------------------------------------------------------------------------------

Demonstrates VUnit's support for logging.

`JSON-for-VHDL <https://github.com/VUnit/vunit/tree/master/examples/vhdl/json4vhdl/>`_
--------------------------------------------------------------------------------------

Demonstrates the ``JSON-for-VHDL`` library which can be used to parse JSON content.
The content can be read from a file, or passed as a stringified generic.
This is an alternative to composite generics, that supports any depth in the content structure.

`Vivado IP <https://github.com/VUnit/vunit/tree/master/examples/vhdl/vivado/>`_
-------------------------------------------------------------------------------

Demonstrates compiling and performing behavioral simulation of
Vivado IPs with VUnit.

`Generating tests <https://github.com/VUnit/vunit/tree/master/examples/vhdl/generate_tests/>`_
----------------------------------------------------------------------------------------------

Demonstrates generating multiple test runs of the same test bench
with different generic values. Also demonstrates use of ``output_path`` generic
to create test bench output files in location specified by VUnit python runner.

`Array and AXI4 Stream Verification Components <https://github.com/VUnit/vunit/tree/master/examples/vhdl/array_axis_vcs/>`_
---------------------------------------------------------------------------------------------------------------------------

Demonstrates ``array_t``, ``axi_stream_master_t`` and ``axi_stream_slave_t``
data types of ``array_pkg.vhd``, ``stream_master_pkg`` and ``stream_slave_pkg``,
respectively. Also, ``push_axi_stream`` of ``axi_stream_pkg`` is used. A CSV file
is read, the content is sent in a row-major order to an AXI Stream buffer (FIFO)
and it is received back to be saved in a different file. Further information can
be found in the :ref:`verification component library user guide <vc_library>`,
in subsection :ref:`Stream <stream_vci>` and in
:vunit_file:`vhdl/verification_components/test/tb_axi_stream.vhd <vunit/vhdl/verification_components/test/tb_axi_stream.vhd>`.

`VHDL UART <https://github.com/VUnit/vunit/tree/master/examples/vhdl/uart/>`_
-----------------------------------------------------------------------------

A more realistic test bench of an UART to show VUnit VHDL usage on a
typical module.

SystemVerilog
~~~~~~~~~~~~~~~~~~~~~~~

`SystemVerilog User Guide <https://github.com/VUnit/vunit/tree/master/examples/verilog/user_guide/>`_
-----------------------------------------------------------------------------------------------------

The most minimal VUnit SystemVerilog project covering the basics of
the :ref:`User Guide <user_guide>`.

`SystemVerilog UART <https://github.com/VUnit/vunit/tree/master/examples/verilog/uart/>`_
-----------------------------------------------------------------------------------------

A more realistic test bench of an UART to show VUnit SystemVerilog
usage on a typical module.

